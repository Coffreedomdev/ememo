/**
    @filename   :   epd2in7.cpp
    @brief      :   Implements for e-paper library
    @author     :   Yehui from Waveshare

    Copyright (C) Waveshare     August 18 2017

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documnetation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to  whom the Software is
   furished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS OR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
*/

#include "epd2in7.h"

uint8_t power[8] = {128, 64, 32, 16, 8, 4, 2, 1};

Epd::~Epd() {
};

Epd::Epd() {
  reset_pin = RST_PIN;
  dc_pin = DC_PIN;
  cs_pin = CS_PIN;
  busy_pin = BUSY_PIN;
  width = EPD_WIDTH;
  height = EPD_HEIGHT;
};

int Epd::Init(uint8_t rotate) {
  rotation = rotate;
  if (IfInit() != 0) {
    return -1;
  }
  Reset();
  SendCommand(POWER_SETTING);
  SendData(0x03);
  SendData(0x00);                  // VCOM_HV, VGHL_LV[1], VGHL_LV[0]
  SendData(0x2b);                  // VDH
  SendData(0x2b);                  // VDL
  SendData(0x09);                  // VDHR
  SendCommand(BOOSTER_SOFT_START);
  SendData(0x07);
  SendData(0x07);
  SendData(0x17);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x60);
  SendData(0xA5);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x89);
  SendData(0xA5);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x90);
  SendData(0x00);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x93);
  SendData(0x2A);
  // Power optimization
  SendCommand(0xF8);
  SendData(0xA0);
  SendData(0xA5);
  // Power optimization
  SendCommand(0xF8);
  SendData(0xA1);
  SendData(0x00);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x73);
  SendData(0x41);
  SendCommand(PARTIAL_DISPLAY_REFRESH);
  SendData(0x00);
  SendCommand(POWER_ON);
  WaitUntilIdle();
  SendCommand(PANEL_SETTING);
  SendData(0xAF);        //KW-BF   KWR-AF    BWROTP 0f
  SendCommand(PLL_CONTROL);
  SendData(0x3A);       //3A 100HZ   29 150Hz 39 200HZ    31 171HZ
  SendCommand(VCM_DC_SETTING_REGISTER);
  SendData(0x12);
  DelayMs(2);
  return 0;
};
void Epd::setRotation(uint8_t rotate){
  rotation = rotate;
}


int Epd::Init2(void) {
  Reset();
  SendCommand(POWER_SETTING);
  SendData(0x03);
  SendData(0x00);                  // VCOM_HV, VGHL_LV[1], VGHL_LV[0]
  SendData(0x2b);                  // VDH
  SendData(0x2b);                  // VDL
  SendData(0x09);                  // VDHR
  SendCommand(BOOSTER_SOFT_START);
  SendData(0x07);
  SendData(0x07);
  SendData(0x17);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x60);
  SendData(0xA5);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x89);
  SendData(0xA5);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x90);
  SendData(0x00);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x93);
  SendData(0x2A);
  // Power optimization
  SendCommand(0xF8);
  SendData(0xA0);
  SendData(0xA5);
  // Power optimization
  SendCommand(0xF8);
  SendData(0xA1);
  SendData(0x00);
  // Power optimization
  SendCommand(0xF8);
  SendData(0x73);
  SendData(0x41);
  SendCommand(PARTIAL_DISPLAY_REFRESH);
  SendData(0x00);
  SendCommand(POWER_ON);
  WaitUntilIdle();
  SendCommand(PANEL_SETTING);
  SendData(0xAF);        //KW-BF   KWR-AF    BWROTP 0f
  SendCommand(PLL_CONTROL);
  SendData(0x3A);       //3A 100HZ   29 150Hz 39 200HZ    31 171HZ
  SendCommand(VCM_DC_SETTING_REGISTER);
  SendData(0x12);
  DelayMs(2);
  return 0;
}

void Epd::SendCommand(unsigned char command) {
  DigitalWrite(dc_pin, LOW);
  SpiTransfer(command);
}

uint8_t Epd::bit_reverse(uint8_t b)
{
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
   return b;
}

void Epd::SendData(unsigned char dat) {
  DigitalWrite(dc_pin, HIGH);
  SpiTransfer(dat);
}

void Epd::WaitUntilIdle(void) {
  // Serial.print("e-Paper busy\r\n");
  while (DigitalRead(busy_pin) == 0) {     //0: busy, 1: idle
    DelayMs(100);
  };
  // DelayMs(500);
  // Serial.print("e-Paper busy release\r\n");
}

void Epd::Reset(void) {
  DigitalWrite(reset_pin, HIGH);
  DelayMs(200);
  DigitalWrite(reset_pin, LOW);
  DelayMs(10);
  DigitalWrite(reset_pin, HIGH);
  DelayMs(200);
}

void Epd::SetLut16_sClear(void) {
  unsigned int count;
  SendCommand(LUT_FOR_VCOM);                            //vcom
  for (count = 0; count < 44; count++) {
    SendData(lut_vcom_dc16_sClear[count]);
  }
  SendCommand(LUT_WHITE_TO_WHITE);                      //ww --
  for (count = 0; count < 42; count++) {
    SendData(lut_ww16_sClear[count]);
  }
  SendCommand(LUT_BLACK_TO_WHITE);                      //bw r
  for (count = 0; count < 42; count++) {
    SendData(lut_bw16_sClear[count]);
  }
  SendCommand(LUT_WHITE_TO_BLACK);                      //wb w
  for (count = 0; count < 42; count++) {
    SendData(lut_wb16_sClear[count]);
  }
  SendCommand(LUT_BLACK_TO_BLACK);                      //bb b
  for (count = 0; count < 42; count++) {
    SendData(lut_bb16_sClear[count]);
  }
}

void Epd::SetLut16_fClear(void) {
  unsigned int count;
  SendCommand(LUT_FOR_VCOM);                            //vcom
  for (count = 0; count < 44; count++) {
    SendData(lut_vcom_dc16_fClear[count]);
  }
  SendCommand(LUT_WHITE_TO_WHITE);                      //ww --
  for (count = 0; count < 42; count++) {
    SendData(lut_ww16_fClear[count]);
  }
  SendCommand(LUT_BLACK_TO_WHITE);                      //bw r
  for (count = 0; count < 42; count++) {
    SendData(lut_bw16_fClear[count]);
  }
  SendCommand(LUT_WHITE_TO_BLACK);                      //wb w
  for (count = 0; count < 42; count++) {
    SendData(lut_wb16_fClear[count]);
  }
  SendCommand(LUT_BLACK_TO_BLACK);                      //bb b
  for (count = 0; count < 42; count++) {
    SendData(lut_bb16_fClear[count]);
  }
}

void Epd::SetLut2_sUpdate(void) {
  unsigned int count;
  SendCommand(LUT_FOR_VCOM);                            //vcom
  for (count = 0; count < 44; count++) {
    SendData(lut_vcom_dc2_sUpdate[count]);
  }
  SendCommand(LUT_WHITE_TO_WHITE);                      //ww --
  for (count = 0; count < 42; count++) {
    SendData(lut_ww2_sUpdate[count]);
  }
  SendCommand(LUT_BLACK_TO_WHITE);                      //bw r
  for (count = 0; count < 42; count++) {
    SendData(lut_bw2_sUpdate[count]);
  }
  SendCommand(LUT_WHITE_TO_BLACK);                      //wb w
  for (count = 0; count < 42; count++) {
    SendData(lut_wb2_sUpdate[count]);
  }
  SendCommand(LUT_BLACK_TO_BLACK);                      //bb b
  for (count = 0; count < 42; count++) {
    SendData(lut_bb2_sUpdate[count]);
  }
}

void Epd::SetLut2_fUpdate(void) {
  unsigned int count;
  SendCommand(LUT_FOR_VCOM);                            //vcom
  for (count = 0; count < 44; count++) {
    SendData(lut_vcom_dc2_fUpdate[count]);
  }
  SendCommand(LUT_WHITE_TO_WHITE);                      //ww --
  for (count = 0; count < 42; count++) {
    SendData(lut_ww2_fUpdate[count]);
  }
  SendCommand(LUT_BLACK_TO_WHITE);                      //bw r
  for (count = 0; count < 42; count++) {
    SendData(lut_bw2_fUpdate[count]);
  }
  SendCommand(LUT_WHITE_TO_BLACK);                      //wb w
  for (count = 0; count < 42; count++) {
    SendData(lut_wb2_fUpdate[count]);
  }
  SendCommand(LUT_BLACK_TO_BLACK);                      //bb b
  for (count = 0; count < 42; count++) {
    SendData(lut_bb2_fUpdate[count]);
  }
}

void Epd::SetLut2_pUpdate(void) {
  unsigned int count;
  SendCommand(LUT_FOR_VCOM);                            //vcom
  for (count = 0; count < 44; count++) {
    SendData(lut_vcom_dc2_pUpdate[count]);
  }
  SendCommand(LUT_WHITE_TO_WHITE);                      //ww --
  for (count = 0; count < 42; count++) {
    SendData(lut_ww2_pUpdate[count]);
  }
  SendCommand(LUT_BLACK_TO_WHITE);                      //bw r
  for (count = 0; count < 42; count++) {
    SendData(lut_bw2_pUpdate[count]);
  }
  SendCommand(LUT_WHITE_TO_BLACK);                      //wb w
  for (count = 0; count < 42; count++) {
    SendData(lut_wb2_pUpdate[count]);
  }
  SendCommand(LUT_BLACK_TO_BLACK);                      //bb b
  for (count = 0; count < 42; count++) {
    SendData(lut_bb2_pUpdate[count]);
  }
}

void Epd::SetLut16_Update(uint8_t l) {
  unsigned int count;
  uint8_t lut_dat[16] = {0, 3, 3, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 0, 0};
  uint8_t lut_tim = 0;
  lut_tim = lut_dat[l];
  SendCommand(LUT_FOR_VCOM);                            //vcom
  for (count = 0; count < 44; count++) {
    if (count == 3) {
      SendData(lut_tim);
    }
    else {
      SendData(lut_vcom_dc16_Update[count]);
    }
  }
  SendCommand(LUT_WHITE_TO_WHITE);                      //ww --
  for (count = 0; count < 42; count++) {
    if (count == 1) {
      SendData(lut_tim);
    }
    else {
      SendData(lut_ww16_Update[count]);
    }
  }
  SendCommand(LUT_BLACK_TO_WHITE);                      //bw r
  for (count = 0; count < 42; count++) {
    if (count == 1) {
      SendData(lut_tim);
    }
    else {
      SendData(lut_bw16_Update[count]);
    }
  }
  SendCommand(LUT_WHITE_TO_BLACK);                      //wb w
  for (count = 0; count < 42; count++) {
    if (count == 1) {
      SendData(lut_tim);
    }
    else {
      SendData(lut_wb16_Update[count]);
    }
  }
  SendCommand(LUT_BLACK_TO_BLACK);                      //bb b
  for (count = 0; count < 42; count++) {
    if (count == 1) {
      SendData(lut_tim);
    }
    else {
      SendData(lut_bb16_Update[count]);
    }
  }
}

void Epd::DisplayFrame16(uint8_t type, const unsigned char* frame_buffer) {
  if (frame_buffer != NULL) {
    Init2();
    if (type == 0) SetLut16_sClear();
    else SetLut16_fClear();
    ClearFrame();
    DisplayFrame();
    for (int l = 1; l < 16; l++) {
      SetLut16_Update(l);
      SendCommand(DATA_START_TRANSMISSION_1);
      DelayMs(2);
      for (int i = 0; i < 5808; i++) {
        SendData(0x00);
      }
      DelayMs(2);
      SendCommand(DATA_START_TRANSMISSION_2);
      DelayMs(2);
      if (rotation == ROTATE_0){
        for (int i = 0; i < 5808; i++) {
          uint8_t tmp = 0;
          for (int j=0;j<4;j++){
            uint8_t tt = (frame_buffer[i * 4 + j + 1] >>4 ) > l;
            tmp |= (tt << (7-2*j));
            tt = (frame_buffer[i * 4 + j + 1] & 0b1111) > l;
            tmp |= (tt << (7-2*j-1));
          }
          SendData(0xFF-tmp);
        }
      }
      else {
        int cByteCnt = 22;
        for (int i = 263; i >-1; i--) 
        for (int j = cByteCnt-1; j >-1; j--){
          uint8_t tmp = 0;
          for (int k=0;k<4;k++){
            uint8_t tt = (frame_buffer[(i*cByteCnt+j) * 4 + k + 1] >>4) > l;
            tmp |= (tt << (2*k));
            tt = (frame_buffer[(i*cByteCnt+j) * 4 + k + 1] & 0b1111) > l;
            tmp |= (tt << (2*k)+1);
          }
          SendData(0xFF-tmp);
        }
      }
      DelayMs(2);
      SendCommand(0x12);
      //DelayMs(200);
      WaitUntilIdle();
    }
  }
}

void Epd::DisplayFrame2(uint8_t type, const unsigned char* frame_buffer) {
  if (frame_buffer != NULL) {
    Init2();
    if (type == 0) SetLut2_sUpdate();
    else SetLut2_fUpdate();
    
    SendCommand(DATA_START_TRANSMISSION_1);
    DelayMs(2);
    for (int i = 0; i < 5808; i++) {
      SendData(0xff);
    }
    DelayMs(2);
    SendCommand(DATA_START_TRANSMISSION_2);
    DelayMs(2);
    if (rotation == ROTATE_0){
       for (int i = 1; i < 5809; i++)
      {
        SendData(0xFF - pgm_read_byte(&frame_buffer[i]));
      }
    } else {
      int cByteCnt = height/8;
      for (int i = width-1; i > -1; i--) 
      for (int j = cByteCnt-1; j > -1; j--) 
      {
        SendData(0xFF - bit_reverse(pgm_read_byte(&frame_buffer[1+i*cByteCnt+j])));
      }
    }
    DelayMs(2);
    SendCommand(0x12);
    //DelayMs(200);
    WaitUntilIdle();
  }
}
void Epd::DisplayFrame2A(const unsigned char* frame_buffer) {
  if (frame_buffer != NULL) {
    SetLut2_pUpdate();    
    SendCommand(DATA_START_TRANSMISSION_1);
    DelayMs(2);
    for (int i = 0; i < 5808; i++) {
      SendData(0xff);
    }
    DelayMs(2);
    SendCommand(DATA_START_TRANSMISSION_2);
    DelayMs(2);
    if (rotation == ROTATE_0){
       for (int i = 1; i < 5809; i++)
      {
        SendData(0xFF - pgm_read_byte(&frame_buffer[i]));
      }
    } else {
      int cByteCnt = height/8;
      for (int i = width-1; i > -1; i--) 
      for (int j = cByteCnt-1; j > -1; j--) 
      {
        SendData(0xFF - bit_reverse(pgm_read_byte(&frame_buffer[1+i*cByteCnt+j])));
      }
    }
    DelayMs(2);
    SendCommand(0x12);
    //DelayMs(200);
    WaitUntilIdle();
  }
}



void Epd::DisplayFrameP(int x, int y, int w, int l, const unsigned char* frame_buffer) {
  w = w + x%8;
  x = x - x%8;
  if (w%8 > 0) w = w + (8 - w%8);

  if (frame_buffer != NULL) {
    SendCommand(PARTIAL_DATA_START_TRANSMISSION_2);
    SendData(0 >> 8);
    SendData(0 & 0xf8);
    SendData(0 >> 8);
    SendData(0 & 0xff);
    SendData(176 >> 8);
    SendData(176 & 0xf8);
    SendData(264 >> 8);
    SendData(264 & 0xff);
    DelayMs(2);
    if (rotation == ROTATE_0){
      for(int i=0;i<5808;i++)
      SendData(0xFF - pgm_read_byte(&frame_buffer[i]));
      // int cByteCnt = width/8;
      // for (int j = 0; j < l; j++)
      // for (int i = 0; i < w/8; i++){
      //   unsigned char tt= 0xFF - pgm_read_byte(&frame_buffer[y*cByteCnt+j*cByteCnt+x+i]);
      //   // if (tt !=0 && tt!=255)Serial.printf("[%u,%u]",tt,y*cByteCnt+j*cByteCnt+x+i);
      //   SendData(tt);
      // }
    } 
    else {
      int cByteCnt = height/8;
      for (int i = width-1; i > -1; i--) 
      for (int j = cByteCnt-1; j > -1; j--) 
      {
        SendData(0xFF-bit_reverse(pgm_read_byte(&frame_buffer[i*cByteCnt+j])));
      }
      x = 176 -x - w;
      y = 264 -y - l;
    };  
    DelayMs(2);
    
    SetLut2_pUpdate();
    SendCommand(PARTIAL_DISPLAY_REFRESH); 
    SendData(x >> 8);
    SendData(x & 0xf8);
    SendData(y >> 8);        
    SendData(y & 0xff);
    SendData(w >> 8);
    SendData(w & 0xf8);
    SendData(l >> 8);        
    SendData(l & 0xff);
    WaitUntilIdle();
  }
}

void Epd::ClearFrame(void) {
  SendCommand(DATA_START_TRANSMISSION_1);
  DelayMs(2);
  for (int i = 0; i < 5808; i++) {
    SendData(0xFF);
  }
  DelayMs(2);
  SendCommand(DATA_START_TRANSMISSION_2);
  DelayMs(2);
  for (int i = 0; i < 5808; i++) {
    SendData(0xFF);
  }
  DelayMs(2);
}

void Epd::DisplayFrame(void) {
  SendCommand(DISPLAY_REFRESH);
  DelayMs(200);
  WaitUntilIdle();
}

void Epd::Sleep() {
  SendCommand(DEEP_SLEEP);
  SendData(0xa5);
}

void Epd::SendDisplayData(const unsigned char* frame_buffer){
  // send data 5808;
  SendCommand(PARTIAL_DATA_START_TRANSMISSION_2);
  SendData(0 >> 8);
  SendData(0 & 0xf8);
  SendData(0 >> 8);
  SendData(0 & 0xff);
  SendData(176 >> 8);
  SendData(176 & 0xf8);
  SendData(264 >> 8);
  SendData(264 & 0xff);
  DelayMs(2);
  if (rotation == ROTATE_0){
      for (int i = 0; i < 5808; i++)
    {
      SendData(0xFF - pgm_read_byte(&frame_buffer[i]));
    }
  } 
  else {
    int cByteCnt = height/8;
    for (int i = width-1; i > -1; i--) 
    for (int j = cByteCnt-1; j > -1; j--) 
    {
      SendData(0xFF-bit_reverse(pgm_read_byte(&frame_buffer[i*cByteCnt+j])));
    }
  };  
  WaitUntilIdle();
}

void Epd::DisplayRectFrame(int x, int y, int w, int l){
  w = w + x%8;
  x = x - x%8;
  if (w%8 > 0) w = w + (8 - w%8);
  if (rotation == ROTATE_180){
    x = 176 - x - w;
    y = 264 - y - l;
  };
  SetLut2_pUpdate();
  SendCommand(PARTIAL_DISPLAY_REFRESH);
  SendData(x >> 8);
  SendData(x & 0xf8);
  SendData(y >> 8);        
  SendData(y & 0xff);
  SendData(w >> 8);
  SendData(w & 0xf8);
  SendData(l >> 8);        
  SendData(l & 0xff);
  DelayMs(200);
  WaitUntilIdle();
}
const unsigned char lut_vcom_dc16_sClear[] = {
  0x00, 0x00,
  0x00, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x00, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_ww16_sClear[] = {
  0x50, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bw16_sClear[] = {
  0x50, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bb16_sClear[] = {
  0xA0, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_wb16_sClear[] = {
  0xA0, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_vcom_dc16_fClear[] = {
  0x00, 0x00,
  0x90, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x90, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_ww16_fClear[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bw16_fClear[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bb16_fClear[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_wb16_fClear[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_vcom_dc16_Update[] = {
  0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_ww16_Update[] = {
  0x80, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bw16_Update[] = {
  0x80, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bb16_Update[] = {
  0x40, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_wb16_Update[] = {
  0x40, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_vcom_dc2_sUpdate[] = {
  0x00, 0x00,
  0x00, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x00, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_ww2_sUpdate[] = {
  0x50, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x80, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bw2_sUpdate[] = {
  0x50, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x80, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bb2_sUpdate[] = {
  0xA0, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x40, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_wb2_sUpdate[] = {
  0xA0, 0x0F, 0x0F, 0x00, 0x00, 0x05,
  0x60, 0x32, 0x32, 0x00, 0x00, 0x02,
  0x40, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_vcom_dc2_fUpdate[] = {
  0x00, 0x00,
  0x90, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x90, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_ww2_fUpdate[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x80, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bw2_fUpdate[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x80, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bb2_fUpdate[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x40, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_wb2_fUpdate[] = {
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x60, 0x08, 0x08, 0x00, 0x00, 0x01,
  0x40, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_vcom_dc2_pUpdate[] = {
  0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_ww2_pUpdate[] = {
  0x80, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bw2_pUpdate[] = {
  0x80, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_bb2_pUpdate[] = {
  0x40, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char lut_wb2_pUpdate[] = {
  0x40, 0x08, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

